{"version":3,"sources":["components/SiteLayout/index.js","utils/requests.js","components/DisplayError/index.js","questions.js","components/Questionnaire/UserInput.js","components/Questionnaire/index.js","utils/setAuthorizationToken.js","components/Recommendation/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Content","SiteLayout","children","this","props","className","Component","baseUrl","partialUrl","Paragraph","Typography","Text","DisplayError","error","errors","response","data","config","requestObject","JSON","parse","status","title","subTitle","extra","key","onClick","window","location","reload","strong","style","fontSize","Object","entries","map","paramKey","errorText","color","type","questions","prompt","options","value","label","isNextQuestionSkipped","defaultAnswer","UserInput","handleInput","event","handleUserInput","target","handleNumberInput","handleRadio","inputComponent","handleNext","question","answer","Group","onChange","option","onPressEnter","min","Questionnaire","state","currentQuestionIndex","previousQuestionIndices","isLoading","saveQuestionnaireState","localStorage","setItem","stringify","userInput","updatedQuestions","setState","handlePrevious","updatedPreviousQuestionIndices","newCurrentQuestionIndex","pop","nextQuestionIndex","currentQuestion","find","handleSubmit","a","async","forEach","axios","post","jwt","token","defaults","headers","common","get","recommendation","questionnaireState","newState","to","pathname","finalQuestionIndex","length","bordered","maxWidth","disabled","loading","Recommendation","index","toLowerCase","replace","price","amount","periodicity","App","path","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f54d5a68.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './style.scss';\n\nconst { Header, Content } = Layout;\n\nclass SiteLayout extends Component {\n    render() {\n        const { children } = this.props;\n        return (\n            <Layout className=\"site-layout\">\n                <Header className=\"site-layout__header\">\n                    <span className=\"site-layout__title\">\n                        Insurance Questionnaire\n                    </span>\n                </Header>\n                <Content className=\"site-layout__content\">\n                    {children}\n                </Content>\n            </Layout> \n        );\n    }\n}\n\nexport default SiteLayout;\n","import axios from 'axios';\n\nconst baseUrl = partialUrl => `https://challenge-dot-popsure-204813.appspot.com${partialUrl}`;\n\nexport function sendQuestionnaire(data) {\n    return axios.post(baseUrl`/user`, data);\n}\n\nexport function getRecommendation() {\n    return axios.get(baseUrl`/recommendation`, {});\n}\n\n","import React from 'react';\nimport { Result, Button, Icon, Typography } from 'antd';\n\nconst { Paragraph, Text } = Typography;\n\nfunction DisplayError(error) {\n    const {\n        error: {\n            response: { data: { errors } },\n            config: { data },\n        },\n    } = error;\n    const requestObject = JSON.parse(data);\n    return (\n        <Result\n            status=\"error\"\n            title=\"Submission Failed\"\n            subTitle=\"Please check and modify the following information before resubmitting.\"\n            extra={[\n                <Button\n                    key=\"buy\"\n                    onClick={() => window.location.reload(true)}\n                >\n                    Try Again\n                </Button>,\n            ]}\n        >\n            <div className=\"desc\">\n                <Paragraph>\n                    <Text\n                        strong\n                        style={{\n                            fontSize: 16,\n                        }}\n                    >\n                        The content you submitted has the following errors:\n                    </Text>\n                </Paragraph>\n\n                {\n                    Object.entries(errors).map(\n                        error => {\n                            const [paramKey, [errorText]] = error;\n                            return (\n                                <Paragraph key={paramKey}>\n                                    <Icon\n                                        style={{ color: 'red' }}\n                                        type=\"close-circle\"\n                                    />  \n                                    <Text strong> {requestObject[paramKey]}:</Text> {errorText}\n                                </Paragraph>\n                            )\n                        }\n                    )\n                }\n            </div>\n        </Result>\n    )\n}\n\nexport default DisplayError;","const questions = [\n    {\n        prompt: 'What is your first name?',\n        type: 'string', \n        paramKey: 'firstName',\n    },\n    {\n        prompt: 'What is your address?',\n        type: 'string', \n        paramKey: 'address',\n    },\n    {\n        prompt: 'What is your occupation?',\n        type: 'string', \n        options: [\n            {\n                value: 'EMPLOYED',\n                label: 'Employed',\n            },\n            {\n                value: 'SELF_EMPLOYED',\n                label: 'Self employed',            },\n            {\n                value: 'STUDENT',\n                label: 'Student',\n            },\n        ],\n        paramKey: 'occupation',\n    },\n    {\n        prompt: 'Do you have any children?',\n        type: 'string', \n        options: [\n            { value: 'YES', label: 'yes' },\n            { value: 'NO', label: 'No', isNextQuestionSkipped: true }\n        ],\n    },\n    {\n        prompt: 'How many children do you have?',\n        type: 'number', \n        paramKey: 'numberOfChildren',\n        defaultAnswer: 0,\n    },\n    {\n        prompt: 'What is your email?',\n        type: 'string', \n        paramKey: 'email',\n    },\n];\n\n\nexport { questions };\n\n","import React, { Component } from 'react';\nimport { Input, InputNumber, Radio } from 'antd';\n\nclass UserInput extends Component {\n    handleInput = event => {\n        this.props.handleUserInput(event.target.value);\n    }\n\n    handleNumberInput = value => {\n        this.props.handleUserInput(value);\n    }\n\n    handleRadio = event => {\n        this.handleInput(event);\n    }\n\n    render() {\n        const { handleNext, question: { type, options, answer } } = this.props;\n        let inputComponent;\n\n        if (type === 'string') {\n            if (options) {\n                inputComponent = (\n                    <Radio.Group\n                        onChange={this.handleRadio}\n                        value={answer}\n                    >\n                        {\n                            options.map(\n                                option => (\n                                    <Radio\n                                        key={option.value}\n                                        value={option.value}\n                                    >\n                                        {option.label}\n                                    </Radio>\n                                )\n                            )\n                        }\n                    </Radio.Group>\n                );\n            } else {\n                inputComponent = (\n                    <Input\n                        onChange={this.handleInput}\n                        onPressEnter={handleNext}\n                        value={answer}\n                    />\n                );\n            }\n        } else if (type === 'number') {\n            inputComponent = (\n                <InputNumber\n                    value={answer || 0}\n                    onChange={this.handleNumberInput}\n                    min={0}\n                />\n            )\n        }\n\n        return inputComponent;\n    }\n}\n\nexport default UserInput\n\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\nimport { Button, Card } from 'antd';\nimport setAuthToken from '../../utils/setAuthorizationToken';\nimport { sendQuestionnaire, getRecommendation } from '../../utils/requests';\nimport DisplayError from '../DisplayError';\nimport { questions } from '../../questions';\nimport UserInput from './UserInput';\n\nimport './style.scss';\n\nclass Questionnaire extends Component {\n    state = { \n        questions,\n        currentQuestionIndex: 0,\n        previousQuestionIndices: [],\n        error: null,\n        isLoading: false,\n    };\n\n    componentDidMount() {\n        // Check if the questionaire state is saved in localStorage\n        if (localStorage.questionnaireState) {\n            const newState = JSON.parse(localStorage.questionnaireState);\n            this.setState(newState);\n        }\n    }\n\n    saveQuestionnaireState = () => {\n        const { questions, currentQuestionIndex, previousQuestionIndices} = this.state;\n        localStorage.setItem('questionnaireState', JSON.stringify({\n            questions, currentQuestionIndex, previousQuestionIndices,\n        }));\n    }\n\n    handleUserInput = userInput => {\n        const { questions, currentQuestionIndex } = this.state;\n        const updatedQuestions  = [...questions];\n        updatedQuestions[currentQuestionIndex].answer = userInput;\n\n        this.setState({\n            questions: updatedQuestions,\n        });\n    }\n\n    handlePrevious = () => {\n        const { previousQuestionIndices } = this.state;\n        const updatedPreviousQuestionIndices = [...previousQuestionIndices];\n        const newCurrentQuestionIndex = updatedPreviousQuestionIndices.pop();\n        this.setState({\n            currentQuestionIndex: newCurrentQuestionIndex,\n            previousQuestionIndices: updatedPreviousQuestionIndices,\n        });\n        this.saveQuestionnaireState();\n    }\n\n    handleNext = () => {\n        const { questions, currentQuestionIndex, previousQuestionIndices } = this.state;\n        let nextQuestionIndex = currentQuestionIndex;\n        const currentQuestion = questions[currentQuestionIndex];\n\n        // Only go to the next question if one exists & user has input an answer\n        if (questions[currentQuestionIndex + 1] && currentQuestion.answer){\n            nextQuestionIndex += 1;\n            if (currentQuestion.options) {\n                const optionSelected = currentQuestion.options.find(option => option.value === currentQuestion.answer);\n                // Skip the following question if the selected option has the isNextQuestion skipped flag\n                if (optionSelected.isNextQuestionSkipped) {\n                    nextQuestionIndex += 1;\n                }\n            }\n\n            this.setState({\n                currentQuestionIndex: nextQuestionIndex,\n                previousQuestionIndices: [\n                    ...previousQuestionIndices,\n                    currentQuestionIndex,\n                ],\n            });\n            this.saveQuestionnaireState();\n        }\n    }\n\n    handleSubmit = async () => {\n        this.saveQuestionnaireState();\n        this.setState({ isLoading: true });\n        const { questions } = this.state;\n        const requestObject = {};\n\n        questions.forEach(question => {\n            if (question.paramKey) {\n                requestObject[question.paramKey] = question.answer || question.defaultAnswer;\n            }\n        })\n\n        try {\n            let response = await sendQuestionnaire(requestObject);\n            let jwt = response.data.jwt;\n            setAuthToken(jwt);\n            let recommendation =  await getRecommendation()\n            localStorage.setItem('recommendation', JSON.stringify(recommendation.data));\n            localStorage.setItem('jwt', jwt);\n            window.location.reload(true);\n        } catch(error) {\n            this.setState({ error })\n        }\n    }\n\n    render() {\n        if (localStorage.jwt) {\n            return <Redirect to={{ pathname: '/recommendation' }} />\n        } else if (this.state.error) {\n            return <DisplayError error={this.state.error} />;\n        }\n\n        const { currentQuestionIndex, questions, isLoading } = this.state;\n        const currentQuestion = questions[currentQuestionIndex];\n        const finalQuestionIndex = questions.length - 1;\n\n        return (\n            <div className=\"questionaire__container\">\n                <Card\n                    title={currentQuestion.prompt}\n                    bordered={false}\n                    style={{ maxWidth: 800 }}\n                >\n                    <UserInput\n                        handleUserInput={this.handleUserInput}\n                        handleNext={this.handleNext}\n                        question={currentQuestion}\n                    />\n                    <div className=\"questionaire__buttons\">\n                        {currentQuestionIndex > 0 && (\n                            <Button\n                                onClick={this.handlePrevious}\n                                type=\"primary\"\n                                className=\"previous\"\n                            >\n                                Previous\n                            </Button>\n                        )}\n                        {currentQuestionIndex < finalQuestionIndex && (\n                            <Button\n                                onClick={this.handleNext}\n                                type=\"primary\"\n                                disabled={!currentQuestion.answer}\n                                className=\"next\"\n                            >\n                                Next\n                            </Button>\n                        )}\n                        {currentQuestionIndex === finalQuestionIndex && (\n                            <Button\n                                onClick={this.handleSubmit}\n                                type=\"primary\"\n                                loading={isLoading}\n                                className=\"submit\"\n                            >\n                                Submit Answers\n                            </Button>\n                        )}\n                    </div>\n                </Card>\n            </div>\n        );\n    }\n}\n\nexport default Questionnaire \n","import axios from 'axios';\n\nexport default function setAuthorizationToken(token) {\n    if (token) {\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n        delete axios.defaults.headers.common['Authorization'];\n    }\n}\n\n","import React, { Component } from 'react';\nimport { Card, Result } from 'antd';\n\nimport './style.scss';\n\nexport default class  Recommendation extends Component {\n    state = {\n        recommendation: [],\n    }\n\n    componentDidMount() {\n        if (localStorage.questionnaireState) {\n            const recommendation = JSON.parse(localStorage.recommendation);\n            this.setState({ recommendation });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"recommendation__container\">\n                <Result\n                    status=\"success\"\n                    title=\"We got your recommendation\"\n                    subTitle=\"Based on your answers, this is what makes sense for you\n                    and what you should pay.\"\n                />\n                {\n                    this.state.recommendation.map(\n                        (option, index) => (\n                            <Card key={index} style={{ maxWidth: 800 }}>\n                                <div className=\"insurance-type\">\n                                    {option.type.toLowerCase().replace('_', ' ')}\n                                </div>\n                                <div className=\"price\">\n                                    {`${option.price.amount} euros per ${option.price.periodicity.toLowerCase()}`}\n                                </div>\n                            </Card>\n                        )\n                    )\n                }\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport Layout from './components/SiteLayout';\nimport Questionnaire from './components/Questionnaire';\nimport Recommendation from './components/Recommendation';\n\nimport './App.css';\n\nfunction App() {\n    const jwt = localStorage.jwt;    \n\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Layout>\n                    <Switch>\n                        <Route\n                            path=\"/recommendation\"\n                            render={\n                                () => (\n                                    jwt\n                                        ? <Recommendation />\n                                        : <Redirect to={{\n                                            pathname: \"/\",\n                                        }} />\n                                )\n                            }\n                        />\n                        <Route\n                            path=\"/\"\n                            render={\n                                () => (\n                                    jwt\n                                        ? <Redirect to={{\n                                            pathname: \"/recommendation\",\n                                        }} />\n                                        : <Questionnaire />\n                                )\n                            }\n                        />\n                    </Switch>\n                </Layout>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}